{"version":3,"sources":["components/Form/Form.js","components/ListData/ListData.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","onSubmit","handelSubmit","type","name","placeholder","ListData","data","cou","temp","humidity","description","error","API_KEY","App","state","e","a","preventDefault","city","target","elements","value","country","Country","fetch","api","json","setState","sys","main","weather","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iUAYeA,G,YAVH,SAACC,GACT,OACI,0BAAMC,UAAU,OAAOC,SAAUF,EAAMG,cACnC,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,kDCWGC,G,MAhBC,SAACP,GAEb,OACI,yBAAKC,UAAU,YACVD,EAAMQ,KAAKH,MAAQ,6BAAK,8CAA0BL,EAAMQ,KAAKH,MAC7DL,EAAMQ,KAAKC,KAAO,6BAAK,4CAAwBT,EAAMQ,KAAKC,KAC1DT,EAAMQ,KAAKE,MAAQ,6BAAK,+CAA2BV,EAAMQ,KAAKE,MAC9DV,EAAMQ,KAAKG,UAAY,6BAAK,6CAAyBX,EAAMQ,KAAKG,UAChEX,EAAMQ,KAAKI,aAAe,6BAAK,gDAA4BZ,EAAMQ,KAAKI,aACtEZ,EAAMQ,KAAKK,OAAS,6BAAK,0CAAsBb,EAAMQ,KAAKK,UCJjEC,EAAQ,mCAkDCC,E,4MAhDbC,MAAM,CACJX,KAAK,GACLI,IAAI,GACJC,KAAK,GACLC,SAAS,GACTC,YAAY,GACZC,MAAM,I,EAGRV,a,uCAAa,WAAMc,GAAN,qBAAAC,EAAA,yDACXD,EAAEE,iBACEC,EAAOH,EAAEI,OAAOC,SAASF,KAAKG,MAC9BC,EAAUP,EAAEI,OAAOC,SAASG,QAAQF,OACpCH,IAAQI,EAJD,iCAKSE,MAAM,oDAAD,OAAqDN,EAArD,YAA6DI,EAA7D,kBAA8EV,IAL5F,cAKHa,EALG,gBAMUA,EAAIC,OANd,OAMHpB,EANG,OAOT,EAAKqB,SAAS,CACZxB,KAAKG,EAAKH,KACVI,IAAID,EAAKsB,IAAIN,QACbd,KAAKF,EAAKuB,KAAKrB,KACfC,SAASH,EAAKuB,KAAKpB,SACnBC,YAAYJ,EAAKwB,QAAQ,GAAGpB,YAC5BC,MAAM,KAERoB,QAAQC,IAAId,EAAOI,GACnBS,QAAQC,IAAI1B,GAhBH,wBAkBT,EAAKqB,SAAS,CACZxB,KAAK,GACLI,IAAI,GACJC,KAAK,GACLC,SAAS,GACTC,YAAY,GACZC,MAAM,4BAxBC,4C,6GA8BX,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,CAAME,aAAcgC,KAAKhC,eACzB,kBAAC,EAAD,CAAUK,KAAM2B,KAAKnB,a,GA3CXoB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLoB,QAAQpB,MAAMA,EAAMyC,c","file":"static/js/main.26070b5b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Form.css'\r\nconst Form =(props)=>{\r\n    return(\r\n        <form className=\"form\" onSubmit={props.handelSubmit}>\r\n            <input type='text' name='city' placeholder=\"City...\"/>\r\n            <input type='text' name='Country' placeholder=\"Country...\"/>\r\n            <button>Get Weather</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react';\r\nimport './ListData.css'\r\nconst ListData =(props)=>{\r\n    // const {data}=props;\r\n    return(\r\n        <div className=\"datalist\">\r\n            {props.data.name && <div><span>City Name : </span>{props.data.name}</div>}\r\n            {props.data.cou && <div><span>Country : </span>{props.data.cou}</div>}\r\n            {props.data.temp && <div><span>Tempreture : </span>{props.data.temp}</div>}\r\n            {props.data.humidity && <div><span>Humidity : </span>{props.data.humidity}</div>}\r\n            {props.data.description && <div><span>description : </span>{props.data.description}</div>}\r\n            {props.data.error && <div><span>Error : </span>{props.data.error}</div>}\r\n        \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ListData","import React from 'react';\nimport './App.css';\nimport Form from './components/Form/Form'\nimport ListData from './components/ListData/ListData'\nimport { Component } from 'react';\n\n// const API_KEY = '58765b3e216b2a4e245094790b98c994';\nconst API_KEY=\"58765b3e216b2a4e245094790b98c994\";\nclass App extends Component{\n  state={\n    name:'',\n    cou:'',\n    temp:'',  \n    humidity:'',\n    description:'',\n    error:''\n  }\n\n  handelSubmit=async(e)=>{\n    e.preventDefault();\n    let city = e.target.elements.city.value;\n    let country = e.target.elements.Country.value;\n    if (city && country){\n      const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n      const data = await api.json();\n      this.setState({\n        name:data.name,\n        cou:data.sys.country,\n        temp:data.main.temp,  \n        humidity:data.main.humidity,\n        description:data.weather[0].description,\n        error:\"\"\n      })\n      console.log(city , country);\n      console.log(data)\n    }else{\n      this.setState({\n        name:'',\n        cou:'',\n        temp:'',  \n        humidity:'',\n        description:'',\n        error:\"please enter valid data\"\n      })\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Form handelSubmit={this.handelSubmit}/>\n        <ListData data={this.state}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}